(require '[state-flow.core :refer [flow run]]
         '[state-flow.state :as state]
         '[state-flow.assertions.matcher-combinators :refer [match?]])

;; -------------------------------------------
;; introduction the state monad and primitives
;; -------------------------------------------
;;
;; state-flow is implemented using a state monad. If you're already
;; familiar with monads, great! If not, don't worry. We'll explain
;; just enough about the state monad to understand state-flow.
;;
;; - A monad is a wrapper around a function.
;; - The wrapped function will be invoked by a runner later.
;; - A state monad is a monad with a function of some mutable state,
;;   which is managed for you by the runner.
;;
;; The state monad is the underlying structure for any primitive
;; step or flow (collection of steps) in state-flow.
;;
;; state-flow includes a number of constructors for primitive steps
;; (state monads) e.g.

(state/return {:count 37})
;; => #cats.monad.state.State{:mfn #function[...],
;;                            :state-context #<State-E>}
;;
;; - cats.monad.state.State is the class of the underlying object
;; - :mfn is the wrapped (monadic) function
;; - :state-context is a reference to mutable state, which will be
;;   managed by state-flow
;;
;; The :mfn of any state monad is a function of state, which returns
;; a vector of [return-value, state-after-invocation]. Since this is
;; just a Clojure function, you can extract it from the monad and
;; invoke it directly:

(let [mfn (:mfn (state/return {:count 37}))]
  (mfn {:count 0}))
;; => [{:count 37} {:count 0}]
;;
;; The return value of the :mfn of `(state/return <value>)` is whatever argument
;; you provide. Also, as you can see in the output above, this function doesn't
;; change the state.
;;
;; state-flow provides a `run` function that handles the unwrapping
;; and manages state for you:

(run (state/return {:count 37})
  {:count 0})
;; => [{:count 37} {:count 0}]
;;
;; The `run` function takes a state monad and an (optional - defaults
;; to an empty {}) initial state, and returns the return value from
;; invoking the :mfn with the state.
;;
;; Here's a primitive step that returns the application of a function
;; to the state, without actually changing the state:

(run (state/gets (fn [s] (update s :count inc))) {:count 0})
;; => [{:count 1} {:count 0}]
;;
;; In case is is not clear, the first element in the vector is the
;; return value, the result of applying the anonymous function
;; passed to `state/gets` to the state, `{:count 0}`. The result
;; is that the value of `:count` is incremented, in the return-value,
;; but the state, the second element of the vector, is unchanged.
;;
;; This next one does the reverse of `state/gets`: it returns the
;; unmodified state and applies a function to the state

(run (state/modify (fn [s] (update s :count inc))) {:count 0})
;; => [{:count 0} {:count 1}]
;;
;; `modify` and `gets` each pass additional args to the function,
;; so this `modify` could look like this, instead:

(run (state/modify update :count inc) {:count 0})
;; => [{:count 0} {:count 1}]

;; ... and the `gets`, above, could look like this:

(run (state/gets update :count inc) {:count 0})
;; => [{:count 1} {:count 0}]

;; We can also replace the internal state entirely, returning the previous state:

(run (state/put {:name "Jacob"}) {:count 0})
;; => [{:count 0} {:name "Jacob"}]

;; -------------------------------------------
;; flows
;; -------------------------------------------
;;
;; We use flows to string together several steps in a single step:

(flow "counter"
  (state/modify update :count inc)
  (state/modify update :count inc)
  (state/modify update :count inc))
;; => #cats.monad.state.State{:mfn #object[...],
;;                            :state-context #<State-E>}
;;
;; And, then we can hand that directly to the run function:

(run (flow "counter"
       (state/modify update :count inc)
       (state/modify update :count inc)
       (state/modify update :count inc))
  {:count 0})
;; => [{:count 2} {:count 3}]
;;
;; `run` returns a vector of [return state], just as in previous examples.
;; The return of a flow is the return of the last step. Within the flow,
;; each step is run in sequence, passing the initial state to the first
;; step, then the resulting state (the 2nd element of the returned vector)
;; to the next, and so on, e.g.
;;

;; (run (flow "counter"
;;        (state/modify update :count inc)
;;        ^^ fn is invoked with {:count 0}, produces [{:count 0} {:count 1}]
;;        (state/modify update :count inc)
;;        ^^ fn is invoked with {:count 1}, produces [{:count 1} {:count 2}]
;;        (state/modify update :count inc)
;;        ^^ fn is invoked with {:count 2}, produces [{:count 2} {:count 3}]
;;   {:count 0})
;; => [{:count 2} {:count 3}]
;;    ^^ the value produced by the last invocation within the flow
;;
;; The return from running a flow is no different than the return from
;; running a primitive: a vector of [result state], where result is the
;; result of applying the last monad function in the flow to the state
;; _after_ having applied the previous functions (hence the input)
;;
;; -------------------------------------------
;; programming model
;; -------------------------------------------
;;
;; Since steps and flows are state monads, which are values, we can use all
;; the familiar tools of Clojure to define and compose them.

(def inc-count (state/modify update :count inc))

(def inc-twice
  (flow "increment twice"
    inc-count
    inc-count))

(run inc-twice {:count 0})
;; => [{:count 1} {:count 2}]
;;
;; And we can nest flows arbitrarily deeply!

(run
  (flow "inc (parent)"
    inc-count
    (flow "inc twice (child)"
      inc-twice
      (flow "inc 2 more times (grandchild)"
        inc-twice))
    (state/gets update :count * 3))
  {:count 0})
;; => [{:count 15} {:count 5}]

;; -----------------------------
;; bindings
;; -----------------------------
;;
;; bindings let you bind the returns of steps to symbols,
;; which are then in scope for the remainder of the flow

(run
  (flow "binding example"
    [count-before (state/gets :count)] ;; <- binds 0 to `count-before`
    inc-count
    [count-after (state/gets :count)]  ;; <- binds 1 to `count-after`
    (state/return {:before count-before
                   :after count-after}))
  {:count 0})
;; => [{:before 0, :after 1} {:count 1}]

;; These look a lot like `let` bindings, but the symbol on the left
;; will be bound to the return of the monad on the right. You can also
;; bind _values_ using the `:let` keyword:

(run
  (flow "binding example"
    [:let [start 37]]
    (state/modify update :count + start)
    (state/gets :count))
  {:count 0})
;; => [37 {:count 37}]

;; And those values can come from evaluating regular Clojure expressions:

(run
  (flow "binding example"
    [:let [start (+ 30 7)]]
    (state/modify update :count + start)
    (state/gets :count))
  {:count 0})
;; => [37 {:count 37}]

;; -----------------------------
;; beyond primitives
;; -----------------------------
;;
;; So far we've only dealt with functions that interact directly with
;; state. In practice, we want to execute functions that are specific
;; to our domain, that don't interact directly with the flow state
;; To run a normal clojure expression in a flow, you need to wrap it.

(run (flow "vanilla clojure in a flow" (state/wrap-fn #(+ 1 2))) {})
;; => [3 {}]

;; Here's a more practical example, in which we draw from state
;; to provide arguments to domain functions.

(defn register-user [db user]
  (swap! db update :users conj user))

(defn fetch-users [db]
  (:users @db))

(run
  (flow "interact with db"
    [db (state/gets :db)]
    (state/wrap-fn #(register-user db {:name "Phillip"}))
    (state/wrap-fn #(fetch-users db)))
  {:db (atom {:users #{}})})
;; => [#{{:name "Phillip"}} {:db #<Atom@4d7999d2: {:users #{{:name "Phillip"}}}>}]
;;
;; ---------------------------
;; assertions
;; ---------------------------
;;
;; state-flow includes a wrapper around matcher-combinators to support
;; making assertions

(run
  (flow "interact with db"
    [db (state/gets :db)]
    (state/wrap-fn #(register-user db {:name "Phillip"}))
    [users (state/wrap-fn #(fetch-users db))]
    (flow "user got added"
      (match? #{{:name "Phillip"}}
              users)))
  {:db (atom {:users #{}})})

;; could also be written as

(run
  (flow "interact with db"
    [db (state/gets :db)]
    (state/wrap-fn #(register-user db {:name "Phillip"}))
    (flow "user got added"
      (match? #{{:name "Phillip"}}
              (state/wrap-fn #(fetch-users db)))))
  {:db (atom {:users #{}})})

;; ---------------------------
;; failure semantics
;; ---------------------------

;; When an assertion fails, it prints the failure message to the
;; repl, e.g.

(run
  (flow "interact with db"
    [db (state/gets :db)]
    (state/wrap-fn #(register-user db {:name "Phillip"}))
    (flow "user got added"
      (match? #{{:name "Philip"}}
              (state/wrap-fn #(fetch-users db))))) ;; <- different spelling
  {:db (atom {:users #{}})})
;; => [#{{:name "Phillip"}} {:db #<Atom@4a65a50f: {:users #{{:name "Phillip"}}}>}]

;; --- printed to repl ---
;; FAIL in () (form-init13207122878088623810.clj:256)
;; interact with db (line 270) -> user got added (line 273) -> match? (line 274)
;; expected: (match? #{{:name "Philip"}} actual__12555__auto__)
;; actual: #{{:name (mismatch "Philip" "Phillip")}}
;; --- /printed to repl ---

;; ---------------------------
;; exceptions
;; ---------------------------

;; When a flow throws an exception ...
;;
;; `run` returns the exception as a value
(run
  (flow "fails"
    (match? 2 1)
    (state/wrap-fn #(throw (ex-info "boom!" {})))
    (flow "is never run"
      (match? 4 3)))
  {})

;; `run*` raises the exception
(state-flow.core/run*
  {:init (constantly {})}
  (flow "fails"
    (match? 2 1)
    (state/wrap-fn #(throw (ex-info "boom!" {})))
    (flow "is never run"
      (match? 4 3))))
